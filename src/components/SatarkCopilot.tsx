import React, { useState } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import { 
  X, 
  Bot, 
  Send, 
  Lightbulb, 
  AlertTriangle, 
  TrendingUp,
  FileText,
  Users,
  BarChart3,
  Zap,
  Brain,
  MessageSquare
} from 'lucide-react';

interface SatarkCopilotProps {
  isOpen: boolean;
  onClose: () => void;
}

const SatarkCopilot: React.FC<SatarkCopilotProps> = ({ isOpen, onClose }) => {
  const { language } = useLanguage();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([
    {
      type: 'bot',
      content: language === 'en' 
        ? 'Hello! I\'m SATARK Copilot, your AI assistant. I can help you analyze survey data, suggest improvements, and flag anomalies. How can I assist you today?'
        : '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç SATARK ‡§ï‡•ã‡§™‡§æ‡§Ø‡§≤‡§ü ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ‡§Æ‡•à‡§Ç ‡§∏‡§∞‡•ç‡§µ‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§®‡•á, ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§®‡•á ‡§î‡§∞ ‡§µ‡§ø‡§∏‡§Ç‡§ó‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?'
    }
  ]);

  const quickActions = [
    {
      icon: TrendingUp,
      label: language === 'en' ? 'Analyze Trends' : '‡§∞‡•Å‡§ù‡§æ‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
      action: 'analyze_trends'
    },
    {
      icon: AlertTriangle,
      label: language === 'en' ? 'Flag Anomalies' : '‡§µ‡§ø‡§∏‡§Ç‡§ó‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
      action: 'flag_anomalies'
    },
    {
      icon: Lightbulb,
      label: language === 'en' ? 'Survey Suggestions' : '‡§∏‡§∞‡•ç‡§µ‡•á ‡§∏‡•Å‡§ù‡§æ‡§µ',
      action: 'survey_suggestions'
    },
    {
      icon: BarChart3,
      label: language === 'en' ? 'Data Insights' : '‡§°‡•á‡§ü‡§æ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø',
      action: 'data_insights'
    }
  ];

  const handleSendMessage = () => {
    if (!message.trim()) return;

    const newMessages = [
      ...messages,
      { type: 'user', content: message },
      { 
        type: 'bot', 
        content: language === 'en' 
          ? 'I\'m analyzing your request. Based on the current survey data, I can see some interesting patterns. Would you like me to generate a detailed report?'
          : '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡§∞‡•ç‡§µ‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, ‡§Æ‡•à‡§Ç ‡§ï‡•Å‡§õ ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§Ç?'
      }
    ];
    
    setMessages(newMessages);
    setMessage('');
  };

  const handleQuickAction = (action: string) => {
    let response = '';
    switch(action) {
      case 'analyze_trends':
        response = language === 'en' 
          ? 'üìä Trend Analysis: I\'ve detected a 23% increase in rural survey participation this month. The highest engagement is in Gujarat and Maharashtra. Would you like detailed state-wise breakdown?'
          : 'üìä ‡§∞‡•Å‡§ù‡§æ‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£: ‡§Æ‡•à‡§Ç‡§®‡•á ‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§∏‡§∞‡•ç‡§µ‡•á ‡§≠‡§æ‡§ó‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Ç 23% ‡§ï‡•Ä ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ó‡•Å‡§ú‡§∞‡§æ‡§§ ‡§î‡§∞ ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡•Å‡§°‡§º‡§æ‡§µ ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§∞‡§æ‡§ú‡•ç‡§Ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?';
        break;
      case 'flag_anomalies':
        response = language === 'en' 
          ? 'üö® Anomaly Alert: Found 12 responses with inconsistent age-income patterns in Survey RHS-2024-001. Recommend manual verification for entries from agents AG-045 and AG-078.'
          : 'üö® ‡§µ‡§ø‡§∏‡§Ç‡§ó‡§§‡§ø ‡§Ö‡§≤‡§∞‡•ç‡§ü: ‡§∏‡§∞‡•ç‡§µ‡•á RHS-2024-001 ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Ç‡§ó‡§§ ‡§Ü‡§Ø‡•Å-‡§Ü‡§Ø ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡•á ‡§∏‡§æ‡§• 12 ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§è‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç‡•§ ‡§è‡§ú‡•á‡§Ç‡§ü AG-045 ‡§î‡§∞ AG-078 ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§®‡•Å‡§Ö‡§≤ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•§';
        break;
      case 'survey_suggestions':
        response = language === 'en' 
          ? 'üí° Survey Optimization: Consider adding skip logic to Q7-Q9 to reduce survey fatigue. Also, the current Hindi translation for "household income" may need localization for rural areas.'
          : 'üí° ‡§∏‡§∞‡•ç‡§µ‡•á ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®: ‡§∏‡§∞‡•ç‡§µ‡•á ‡§•‡§ï‡§æ‡§® ‡§ï‡•ã ‡§ï‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Q7-Q9 ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ï‡§ø‡§™ ‡§≤‡•â‡§ú‡§ø‡§ï ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡§æ‡§• ‡§π‡•Ä, "‡§ò‡§∞‡•á‡§≤‡•Ç ‡§Ü‡§Ø" ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø‡§ï‡§∞‡§£ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§';
        break;
      case 'data_insights':
        response = language === 'en' 
          ? 'üìà Key Insights: WhatsApp responses show 34% higher completion rates than SMS. Voice responses have 89% accuracy vs 76% for text. Recommend prioritizing voice collection in low-literacy areas.'
          : 'üìà ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø: ‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§ê‡§™ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§è‡§Ç SMS ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§Æ‡•á‡§Ç 34% ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ ‡§¶‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§µ‡§æ‡§ú ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è 76% ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§Æ‡•á‡§Ç 89% ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡§Æ ‡§∏‡§æ‡§ï‡•ç‡§∑‡§∞‡§§‡§æ ‡§µ‡§æ‡§≤‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§µ‡§æ‡§ú ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•§';
        break;
    }
    
    setMessages(prev => [...prev, { type: 'bot', content: response }]);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-end">
      <div className="w-full max-w-md h-full bg-white dark:bg-gray-800 shadow-2xl transform transition-transform duration-300 ease-out">
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center">
                <Bot className="h-6 w-6" />
              </div>
              <div>
                <h3 className="text-lg font-bold">SATARK Copilot</h3>
                <p className="text-sm opacity-90">
                  {language === 'en' ? 'AI Survey Assistant' : 'AI ‡§∏‡§∞‡•ç‡§µ‡•á ‡§∏‡§π‡§æ‡§Ø‡§ï'}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white/20 rounded-xl transition-colors"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="p-4 border-b border-gray-200 dark:border-gray-700">
          <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">
            {language === 'en' ? 'Quick Actions' : '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø'}
          </h4>
          <div className="grid grid-cols-2 gap-2">
            {quickActions.map((action, index) => {
              const Icon = action.icon;
              return (
                <button
                  key={index}
                  onClick={() => handleQuickAction(action.action)}
                  className="flex items-center space-x-2 p-3 bg-gray-50 dark:bg-gray-700 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors text-left"
                >
                  <Icon className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                  <span className="text-xs font-medium text-gray-900 dark:text-white">
                    {action.label}
                  </span>
                </button>
              );
            })}
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4 h-96">
          {messages.map((msg, index) => (
            <div
              key={index}
              className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs p-3 rounded-2xl ${
                  msg.type === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'
                }`}
              >
                <p className="text-sm">{msg.content}</p>
              </div>
            </div>
          ))}
        </div>

        {/* Input */}
        <div className="p-4 border-t border-gray-200 dark:border-gray-700">
          <div className="flex space-x-2">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder={language === 'en' ? 'Ask me anything...' : '‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç...'}
              className="flex-1 px-4 py-3 bg-gray-100 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 dark:text-white"
            />
            <button
              onClick={handleSendMessage}
              className="px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 transition-colors"
            >
              <Send className="h-4 w-4" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SatarkCopilot;